<states.Follower.Follower object at 0x000001E535E49990>
[1](Node) onRaftMessage from 2 to -1
[1](State) onAppendEntries
[1](State) onAppendEntries: message=Message(self.senderID=2, self.receiverID=-1, self.term=3, self.commitIndex=3, self.prevLogIndex=7, self.prevLogTerm=1, self.entries=[])
[1](State) onAppendEntries: The previous log entry doesn't match
[1](State) onMessage: message.term > prevCurrentTerm
[1](Node) sendMessageUnicast: message.receiverID=2
[1](Node) onRaftMessage from 2 to -1
[1](State) onAppendEntries
[1](State) onAppendEntries: message=Message(self.senderID=2, self.receiverID=-1, self.term=3, self.commitIndex=3, self.prevLogIndex=7, self.prevLogTerm=1, self.entries=[])
[1](State) onAppendEntries: The previous log entry doesn't match
[1](Node) sendMessageUnicast: message.receiverID=2
[1](Node) onRaftMessage from 2 to 1
[1](State) onAppendEntries
[1](State) onAppendEntries: message=Message(self.senderID=2, self.receiverID=1, self.term=3, self.commitIndex=3, self.prevLogIndex=6, self.prevLogTerm=1, self.entries=[LogEntry(self.term=1, self.action={'clientId': 0, 'clientHost': 'localhost', 'clientPort': 13000, 'currentPosition': {'x': 2, 'y': 2}, 'destination': {'x': 540, 'y': 460}})])
[1](State) onAppendEntries: The previous log entry doesn't match
[1](Node) sendMessageUnicast: message.receiverID=2
[1](Node) onRaftMessage from 2 to 1
[1](State) onAppendEntries
[1](State) onAppendEntries: message=Message(self.senderID=2, self.receiverID=1, self.term=3, self.commitIndex=3, self.prevLogIndex=5, self.prevLogTerm=1, self.entries=[LogEntry(self.term=1, self.action={'clientId': 1, 'clientHost': 'localhost', 'clientPort': 13001, 'currentPosition': {'x': 1, 'y': 1}, 'destination': {'x': 165, 'y': 794}})])
[1](State) onAppendEntries: self.node.log=[LogEntry(self.term=1, self.action={'clientId': 0, 'clientHost': 'localhost', 'clientPort': 13000, 'currentPosition': Coordinate(x=None, y=None), 'destination': Coordinate(x=540, y=460)}), LogEntry(self.term=1, self.action={'clientId': 1, 'clientHost': 'localhost', 'clientPort': 13001, 'currentPosition': Coordinate(x=None, y=None), 'destination': Coordinate(x=165, y=794)}), LogEntry(self.term=1, self.action={'clientId': 0, 'clientHost': 'localhost', 'clientPort': 13000, 'currentPosition': Coordinate(x=1, y=1), 'destination': Coordinate(x=540, y=460)}), LogEntry(self.term=1, self.action={'clientId': 1, 'clientHost': 'localhost', 'clientPort': 13001, 'currentPosition': Coordinate(x=1, y=1), 'destination': Coordinate(x=165, y=794)}), LogEntry(self.term=1, self.action={'clientId': 0, 'clientHost': 'localhost', 'clientPort': 13000, 'currentPosition': {'x': 1, 'y': 1}, 'destination': {'x': 540, 'y': 460}}), LogEntry(self.term=1, self.action={'clientId': 1, 'clientHost': 'localhost', 'clientPort': 13001, 'currentPosition': {'x': 1, 'y': 1}, 'destination': {'x': 165, 'y': 794}}), LogEntry(self.term=1, self.action={'clientId': 1, 'clientHost': 'localhost', 'clientPort': 13001, 'currentPosition': {'x': 1, 'y': 1}, 'destination': {'x': 165, 'y': 794}})]
[1](Node) applyToStateMachine
Traceback (most recent call last):
  File "G:\DistSystems\ProjectDistSystems\node.py", line 55, in <module>
    main()
  File "G:\DistSystems\ProjectDistSystems\node.py", line 47, in main
    node.pollMessages()
  File "G:\DistSystems\ProjectDistSystems\node\Node.py", line 70, in pollMessages
    handleQueue(self.unicastInterface)
  File "G:\DistSystems\ProjectDistSystems\node\Node.py", line 67, in handleQueue
    self.onRaftMessage(message)
  File "G:\DistSystems\ProjectDistSystems\node\Node.py", line 107, in onRaftMessage
    stateClass, response = self.state.onRaftMessage(message=message)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "G:\DistSystems\ProjectDistSystems\states\State.py", line 35, in onRaftMessage
    stateClass, response = self.onAppendEntries(message)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "G:\DistSystems\ProjectDistSystems\states\Follower.py", line 14, in onAppendEntries
    return super().onAppendEntries(message)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "G:\DistSystems\ProjectDistSystems\states\State.py", line 104, in onAppendEntries
    self.applyLogAtIndexToStateMachine(i)
  File "G:\DistSystems\ProjectDistSystems\states\State.py", line 136, in applyLogAtIndexToStateMachine
    nextStep = self.node.applyToStateMachine(navigationRequest)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "G:\DistSystems\ProjectDistSystems\node\Node.py", line 135, in applyToStateMachine
    if message.currentPosition.x is None or message.currentPosition.y is None:
       ^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'dict' object has no attribute 'currentPosition'
[1](Follower) onElectionTimeouted
[1](Node) manuallySwitchState: from <class 'states.Follower.Follower'> to <class 'states.Candidate.Candidate'>
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=4
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=5
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=6
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=7
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=8
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=9
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=10
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=11
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=12
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=13
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=14
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=15
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=16
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=17
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=18
[1](Node) sendMessageBroadcast
[1](Candidate) onElectionTimeouted
[1](Candidate) startElection
[1](Candidate) startElection: self.node.currentTerm=19
[1](Node) sendMessageBroadcast
